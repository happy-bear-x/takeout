<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.takeout.mapper.OrderMapper" >
  <resultMap id="BaseResultMap" type="com.takeout.entity.Order" >
    <result column="ordernum" property="ordernum" jdbcType="VARCHAR" />
    <result column="user" property="user" jdbcType="VARCHAR" />
    <result column="shop" property="shop" jdbcType="VARCHAR" />
    <result column="foodid" property="foodid" jdbcType="INTEGER" />
    <result column="num" property="num" jdbcType="INTEGER" />
    <result column="voucher" property="voucher" jdbcType="INTEGER" />
    <result column="pay" property="pay" jdbcType="DECIMAL" />
    <result column="total" property="total" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="addressid" property="addressid" jdbcType="INTEGER" />
    <result column="finishtime" property="finishtime" jdbcType="TIMESTAMP" />
    <result column="uaddition" property="uaddition" jdbcType="VARCHAR" />
    <result column="saddition" property="saddition" jdbcType="VARCHAR" />
    <result column="toking" property="toking" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ordernum, user, shop, foodid, num, voucher, pay, total, state, addressid, finishtime, 
    uaddition, saddition, toking
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.takeout.entity.OrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.takeout.entity.OrderExample" >
    delete from order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.takeout.entity.Order" >
    insert into order (ordernum, user, shop, 
      foodid, num, voucher, 
      pay, total, state, addressid, 
      finishtime, uaddition, saddition, 
      toking)
    values (#{ordernum,jdbcType=VARCHAR}, #{user,jdbcType=VARCHAR}, #{shop,jdbcType=VARCHAR}, 
      #{foodid,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}, #{voucher,jdbcType=INTEGER}, 
      #{pay,jdbcType=DECIMAL}, #{total,jdbcType=VARCHAR}, #{state,jdbcType=BIT}, #{addressid,jdbcType=INTEGER}, 
      #{finishtime,jdbcType=TIMESTAMP}, #{uaddition,jdbcType=VARCHAR}, #{saddition,jdbcType=VARCHAR}, 
      #{toking,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.takeout.entity.Order" >
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ordernum != null" >
        ordernum,
      </if>
      <if test="user != null" >
        user,
      </if>
      <if test="shop != null" >
        shop,
      </if>
      <if test="foodid != null" >
        foodid,
      </if>
      <if test="num != null" >
        num,
      </if>
      <if test="voucher != null" >
        voucher,
      </if>
      <if test="pay != null" >
        pay,
      </if>
      <if test="total != null" >
        total,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="addressid != null" >
        addressid,
      </if>
      <if test="finishtime != null" >
        finishtime,
      </if>
      <if test="uaddition != null" >
        uaddition,
      </if>
      <if test="saddition != null" >
        saddition,
      </if>
      <if test="toking != null" >
        toking,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ordernum != null" >
        #{ordernum,jdbcType=VARCHAR},
      </if>
      <if test="user != null" >
        #{user,jdbcType=VARCHAR},
      </if>
      <if test="shop != null" >
        #{shop,jdbcType=VARCHAR},
      </if>
      <if test="foodid != null" >
        #{foodid,jdbcType=INTEGER},
      </if>
      <if test="num != null" >
        #{num,jdbcType=INTEGER},
      </if>
      <if test="voucher != null" >
        #{voucher,jdbcType=INTEGER},
      </if>
      <if test="pay != null" >
        #{pay,jdbcType=DECIMAL},
      </if>
      <if test="total != null" >
        #{total,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=BIT},
      </if>
      <if test="addressid != null" >
        #{addressid,jdbcType=INTEGER},
      </if>
      <if test="finishtime != null" >
        #{finishtime,jdbcType=TIMESTAMP},
      </if>
      <if test="uaddition != null" >
        #{uaddition,jdbcType=VARCHAR},
      </if>
      <if test="saddition != null" >
        #{saddition,jdbcType=VARCHAR},
      </if>
      <if test="toking != null" >
        #{toking,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.takeout.entity.OrderExample" resultType="java.lang.Integer" >
    select count(*) from order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update order
    <set >
      <if test="record.ordernum != null" >
        ordernum = #{record.ordernum,jdbcType=VARCHAR},
      </if>
      <if test="record.user != null" >
        user = #{record.user,jdbcType=VARCHAR},
      </if>
      <if test="record.shop != null" >
        shop = #{record.shop,jdbcType=VARCHAR},
      </if>
      <if test="record.foodid != null" >
        foodid = #{record.foodid,jdbcType=INTEGER},
      </if>
      <if test="record.num != null" >
        num = #{record.num,jdbcType=INTEGER},
      </if>
      <if test="record.voucher != null" >
        voucher = #{record.voucher,jdbcType=INTEGER},
      </if>
      <if test="record.pay != null" >
        pay = #{record.pay,jdbcType=DECIMAL},
      </if>
      <if test="record.total != null" >
        total = #{record.total,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=BIT},
      </if>
      <if test="record.addressid != null" >
        addressid = #{record.addressid,jdbcType=INTEGER},
      </if>
      <if test="record.finishtime != null" >
        finishtime = #{record.finishtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.uaddition != null" >
        uaddition = #{record.uaddition,jdbcType=VARCHAR},
      </if>
      <if test="record.saddition != null" >
        saddition = #{record.saddition,jdbcType=VARCHAR},
      </if>
      <if test="record.toking != null" >
        toking = #{record.toking,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update order
    set ordernum = #{record.ordernum,jdbcType=VARCHAR},
      user = #{record.user,jdbcType=VARCHAR},
      shop = #{record.shop,jdbcType=VARCHAR},
      foodid = #{record.foodid,jdbcType=INTEGER},
      num = #{record.num,jdbcType=INTEGER},
      voucher = #{record.voucher,jdbcType=INTEGER},
      pay = #{record.pay,jdbcType=DECIMAL},
      total = #{record.total,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=BIT},
      addressid = #{record.addressid,jdbcType=INTEGER},
      finishtime = #{record.finishtime,jdbcType=TIMESTAMP},
      uaddition = #{record.uaddition,jdbcType=VARCHAR},
      saddition = #{record.saddition,jdbcType=VARCHAR},
      toking = #{record.toking,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>